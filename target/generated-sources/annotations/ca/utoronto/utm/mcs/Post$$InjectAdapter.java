// Code generated by dagger-compiler.  Do not edit.
package ca.utoronto.utm.mcs;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;

/**
 * A {@code Binding<ca.utoronto.utm.mcs.Post>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code ca.utoronto.utm.mcs.Post} and its
 * dependencies.
 *
 * Being a {@code Provider<ca.utoronto.utm.mcs.Post>} and handling creation and
 * preparation of object instances.
 */
public final class Post$$InjectAdapter extends Binding<Post> {
  private Binding<Title> t;

  private Binding<Author> a;

  private Binding<Content> c;

  private Binding<Tags> tag;

  public Post$$InjectAdapter() {
    super("ca.utoronto.utm.mcs.Post", "members/ca.utoronto.utm.mcs.Post", NOT_SINGLETON, Post.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    t = (Binding<Title>) linker.requestBinding("ca.utoronto.utm.mcs.Title", Post.class, getClass().getClassLoader());
    a = (Binding<Author>) linker.requestBinding("ca.utoronto.utm.mcs.Author", Post.class, getClass().getClassLoader());
    c = (Binding<Content>) linker.requestBinding("ca.utoronto.utm.mcs.Content", Post.class, getClass().getClassLoader());
    tag = (Binding<Tags>) linker.requestBinding("ca.utoronto.utm.mcs.Tags", Post.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(t);
    getBindings.add(a);
    getBindings.add(c);
    getBindings.add(tag);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Post>}.
   */
  @Override
  public Post get() {
    Post result = new Post(t.get(), a.get(), c.get(), tag.get());
    return result;
  }
}
