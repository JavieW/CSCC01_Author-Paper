// Code generated by dagger-compiler.  Do not edit.
package ca.utoronto.utm.mcs;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;

/**
 * A {@code Binding<ca.utoronto.utm.mcs.APIHandler>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code ca.utoronto.utm.mcs.APIHandler} and its
 * dependencies.
 *
 * Being a {@code Provider<ca.utoronto.utm.mcs.APIHandler>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<ca.utoronto.utm.mcs.APIHandler>} and handling injection
 * of annotated fields.
 */
public final class APIHandler$$InjectAdapter extends Binding<APIHandler> {
  private Binding<MongoDB> db;

  public APIHandler$$InjectAdapter() {
    super("ca.utoronto.utm.mcs.APIHandler", "members/ca.utoronto.utm.mcs.APIHandler", NOT_SINGLETON, APIHandler.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    db = (Binding<MongoDB>) linker.requestBinding("ca.utoronto.utm.mcs.MongoDB", APIHandler.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(db);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<APIHandler>}.
   */
  @Override
  public APIHandler get() {
    APIHandler result = new APIHandler();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<APIHandler>}.
   */
  @Override
  public void injectMembers(APIHandler object) {
    object.db = db.get();
  }
}
