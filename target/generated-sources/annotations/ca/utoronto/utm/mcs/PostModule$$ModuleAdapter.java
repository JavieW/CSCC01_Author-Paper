// Code generated by dagger-compiler.  Do not edit.
package ca.utoronto.utm.mcs;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @dagger.Provides} methods.
 */
public final class PostModule$$ModuleAdapter extends ModuleAdapter<PostModule> {
  private static final String[] INJECTS = { };

  private static final Class<?>[] STATIC_INJECTIONS = { };

  private static final Class<?>[] INCLUDES = { };

  public PostModule$$ModuleAdapter() {
    super(PostModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  @Override
  public PostModule newModule() {
    return new PostModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, PostModule module) {
    bindings.contributeProvidesBinding("ca.utoronto.utm.mcs.Title", new ProvideTitleProvidesAdapter(module));
    bindings.contributeProvidesBinding("ca.utoronto.utm.mcs.Author", new ProvideAuthorProvidesAdapter(module));
    bindings.contributeProvidesBinding("ca.utoronto.utm.mcs.Content", new ProvideContentProvidesAdapter(module));
    bindings.contributeProvidesBinding("ca.utoronto.utm.mcs.Tags", new ProvideTagsProvidesAdapter(module));
  }

  /**
   * A {@code Binding<Title>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Title>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideTitleProvidesAdapter extends ProvidesBinding<Title> {
    private final PostModule module;

    public ProvideTitleProvidesAdapter(PostModule module) {
      super("ca.utoronto.utm.mcs.Title", NOT_SINGLETON, "ca.utoronto.utm.mcs.PostModule", "provideTitle");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Title>}.
     */
    @Override
    public Title get() {
      return module.provideTitle();
    }
  }

  /**
   * A {@code Binding<Author>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Author>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAuthorProvidesAdapter extends ProvidesBinding<Author> {
    private final PostModule module;

    public ProvideAuthorProvidesAdapter(PostModule module) {
      super("ca.utoronto.utm.mcs.Author", NOT_SINGLETON, "ca.utoronto.utm.mcs.PostModule", "provideAuthor");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Author>}.
     */
    @Override
    public Author get() {
      return module.provideAuthor();
    }
  }

  /**
   * A {@code Binding<Content>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Content>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideContentProvidesAdapter extends ProvidesBinding<Content> {
    private final PostModule module;

    public ProvideContentProvidesAdapter(PostModule module) {
      super("ca.utoronto.utm.mcs.Content", NOT_SINGLETON, "ca.utoronto.utm.mcs.PostModule", "provideContent");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Content>}.
     */
    @Override
    public Content get() {
      return module.provideContent();
    }
  }

  /**
   * A {@code Binding<Tags>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Tags>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideTagsProvidesAdapter extends ProvidesBinding<Tags> {
    private final PostModule module;

    public ProvideTagsProvidesAdapter(PostModule module) {
      super("ca.utoronto.utm.mcs.Tags", NOT_SINGLETON, "ca.utoronto.utm.mcs.PostModule", "provideTags");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Tags>}.
     */
    @Override
    public Tags get() {
      return module.provideTags();
    }
  }
}
